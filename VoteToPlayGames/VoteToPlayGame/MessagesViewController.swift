//
//  MessagesViewController.swift
//  VoteToPlayGame
//
//  Created by ShrawanKumar Sharma on 16/09/16.
//  Copyright Â© 2016 VoteToPlayGames. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        presentViewController(for: conversation, by: presentationStyle)
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

  // MARK: -PresentViewController
    func presentViewController(for:MSConversation,by presentationStyle:MSMessagesAppPresentationStyle)
        {
        
            
            var controller : UIViewController
            if presentationStyle == .compact {
                controller = initateCompactViewController()
            }
            else{
                
                
                ///If new Instance is created than show the game list 
                controller = initateGameListViewController()

                //to show the game instance
                //controller = initiaeVoteViewController()
            }
        
        
            // Remove any existing child controllers.
            for child in childViewControllers {
                child.willMove(toParentViewController: nil)
                child.view.removeFromSuperview()
                child.removeFromParentViewController()
            }
            
            // Embed the new controller.
            addChildViewController(controller)
            
            controller.view.frame = view.bounds
            controller.view.translatesAutoresizingMaskIntoConstraints = false
            view.addSubview(controller.view)
            
            controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
            controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
            controller.view.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
            controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
            
            controller.didMove(toParentViewController: self)

    }
    
    
    // MARK: - InitaiteViewController
    
    
    func initateCompactViewController() -> UIViewController {
        
        // Instantiate a `IceCreamsViewController` and present it.
        guard let controller = storyboard?.instantiateViewController(withIdentifier: CompactViewController.storyboardIdentifier) as? CompactViewController else { fatalError("Unable to instantiate an  CompactViewController from the storyboard") }
        
      //  controller.delegate = self
        
        return controller

        
    }
    
    func initateGameListViewController() -> UIViewController {
        
        // Instantiate a `IceCreamsViewController` and present it.
        guard let controller = storyboard?.instantiateViewController(withIdentifier: GameListController.storyboardIdentifier) as? GameListController else { fatalError("Unable to instantiate an GameListController from the storyboard") }
        
      //  controller.delegate = self
        
        return controller

        
        
    }
    
    func initiaeVoteViewController() -> UIViewController {
        
        // Instantiate a `IceCreamsViewController` and present it.
        guard let controller = storyboard?.instantiateViewController(withIdentifier: VoteGameViewController.storyboardIdentifier) as? VoteGameViewController else { fatalError("Unable to instantiate an VoteGameViewController from the storyboard") }
        
       // controller.delegate = self
        
        return controller

        
    }
    
    
    
    //MARK: - ComposeViewController
    
    
    
    
    
    
    
    
    
    
    
}
